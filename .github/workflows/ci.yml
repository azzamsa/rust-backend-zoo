name: ci

env:
  MIN_SUPPORTED_RUST_VERSION: "1.58.0"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  code_quality:
    name: Code quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal # no documentation
          components: clippy, rustfmt

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Ensure `cargo fmt` has been run
        run: make fmt_check

      - name: Ensure MSRV is set in `clippy.toml`
        run: grep "^msrv = \"${{ env.MIN_SUPPORTED_RUST_VERSION }}\"\$" clippy.toml

      - name: Run clippy
        run: make lint


  min_version:
    name: Minimum supported rust version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install rust toolchain (v${{ env.MIN_SUPPORTED_RUST_VERSION }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.MIN_SUPPORTED_RUST_VERSION }}
          default: true
          profile: minimal

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Prepare the database
        run: |
          docker-compose -f ./tests/docker-compose.yml run -d -p 5432:5432 --name postgres_db postgres_db
          docker exec postgres_db bash -c "until pg_isready; do sleep 1; done"

      #
      # juniper-diesel/rocket
      #

      - name: Migrate the database juniper-diesel/rocket
        working-directory: ./juniper-diesel/rocket
        env:
          DATABASE_URL: postgres://superuser:secret@localhost:5432/jdr
        run: |
          cargo install diesel_cli --no-default-features --features postgres

          diesel setup
          diesel migration run

      - name: Run tests for juniper-diesel/rocket
        uses: actions-rs/cargo@v1
        env:
          # jdr: juniper-diesel/rocket
          DATABASE_URL: postgres://superuser:secret@localhost:5432/jdr
        with:
          command: test
          args: --locked --manifest-path juniper-diesel/rocket/Cargo.toml

      #
      # juniper-diesel/warp
      #

      - name: Migrate the database juniper-diesel/warp
        working-directory: ./juniper-diesel/warp
        env:
          DATABASE_URL: postgres://superuser:secret@localhost:5432/jdw
        run: |
          cargo install diesel_cli --no-default-features --features postgres

          diesel setup
          diesel migration run

      - name: Run tests for juniper-diesel/warp
        uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://superuser:secret@localhost:5432/jdw
        with:
          command: test
          args: --locked --manifest-path juniper-diesel/warp/Cargo.toml

      #
      # async_graphql-diesel/rocket
      #

      - name: Migrate the database async_graphql-diesel/rocket
        working-directory: ./async_graphql-diesel/rocket
        env:
          DATABASE_URL: postgres://superuser:secret@localhost:5432/agr
        run: |
          cargo install diesel_cli --no-default-features --features postgres

          diesel setup
          diesel migration run

      - name: Run tests for async_graphql-diesel/rocket
        uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://superuser:secret@localhost:5432/agr
        with:
          command: test
          args: --locked --manifest-path async_graphql-diesel/rocket/Cargo.toml

  build:
    name: ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu    }
          # Sometimes musl is fails in the CI
          # - { os: ubuntu-latest, target: x86_64-unknown-linux-musl   , use-cross: true }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}
